package model;

import java.util.concurrent.TimeUnit;

/**
 * @author dftamayo
 *
 */
public class antimalwareScanner {

	private String status;
	private int reportSize;

	// Constructor
	/**
	 * @param status
	 * @param reportSize
	 */
	public antimalwareScanner(String status, int reportSize) {
		this.setStatus(status);
		this.setReportSize(reportSize);
	}

	// end Constructor

	/**
	 * @return the status
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * @return the reportSize
	 */
	public int getReportSize() {
		return reportSize;
	}

	/**
	 * @param reportSize the reportSize to set
	 */
	public void setReportSize(int reportSize) {
		this.reportSize = reportSize;
	}

	/**
	 * @param status the status to set
	 */
	public void setStatus(String status) {
		this.status = status;
	}

	/**
	 * @return statement that it is analyzing the file
	 */
	public void analyzeFile() {
		// checks for static malicious content.
		System.out.println("\nStatic Analysis: Analyzing file(s).");
	}

	/**
	 * @return statement that it is executing the file
	 */
	public void executeFile() {
		// attempts to run file and any content within it.
		System.out.println("Executing file(s).");
	}

	/**
	 * @return statement that it is analyzing executed files
	 * @throws InterruptedException
	 */
	public void analyzeExecutable() throws InterruptedException {
		// analyzes files as they are executed
		System.out.println("Dynamic Analysis: Analyzing executable file(s).");
		TimeUnit.SECONDS.sleep(2);
		System.out.println("Analysis complete!\n");
	}

	/**
	 * @return statement that file is being deleted.
	 */
	public void deleteFile() {
		// deletes files determined to be part of an attack.
		System.out.println("Deleting file(s).");
	}

	/**
	 * @return statement that files are being rerouted.
	 */
	public void rerouteCompressedFile() {
		// reroutes compressed file if needed.
		System.out.println("\nRerouting compressed file to CFDRS.");
	}

	/**
	 * @return statement that a report is created with the detonation findings
	 * @throws InterruptedException
	 */
	public void createReport() throws InterruptedException {
		// creates report with findings
		System.out.println("Creating report...");
		TimeUnit.SECONDS.sleep(2);
		System.out.println("Report \"Report1.log\" created. MyReport size is " + this.getReportSize() + "mb.");
	}

	/**
	 * @return statement that a report has been sent.
	 */
	public void sendReport() {
		// sends report for additional action.
		System.out.println("\nSending report to CFRDS.");
		this.setStatus("\nAntimalware: Standing by...");
	}

}// end
